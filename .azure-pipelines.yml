trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - 'v*'

strategy:
  matrix:
    MacOs CPython3.7:
      image: 'macos-latest'
      python.version: '3.7'
      python.architecture: 'x64'
    MacOs CPython3.8:
      image: 'macos-latest'
      python.version: '3.8'
      python.architecture: 'x64'
    MacOs CPython3.9:
      image: 'macos-latest'
      python.version: '3.9'
      python.architecture: 'x64'
    MacOs CPython3.10:
      image: 'macos-latest'
      python.version: '3.10'
      python.architecture: 'x64'
    MacOs PyPy3:
      image: 'macos-latest'
      python.version: 'pypy3'
      python.architecture: 'x64'
    Ubuntu CPython3.6:
      image: 'ubuntu-latest'
      python.version: '3.6'
      python.architecture: 'x64'
    Ubuntu CPython3.7:
      image: 'ubuntu-latest'
      python.version: '3.7'
      python.architecture: 'x64'
    Ubuntu CPython3.8:
      image: 'ubuntu-latest'
      python.version: '3.8'
      python.architecture: 'x64'
    Ubuntu CPython3.9:
      image: 'ubuntu-latest'
      python.version: '3.9'
      python.architecture: 'x64'
    Ubuntu CPython3.10:
      image: 'ubuntu-latest'
      python.version: '3.10'
      python.architecture: 'x64'
    Ubuntu PyPy3:
      image: 'ubuntu-latest'
      python.version: 'pypy3'
      python.architecture: 'x64'
    Windows CPython3.6 (x86):
      image: 'windows-latest'
      python.version: '3.6'
      python.architecture: 'x86'
    Windows CPython3.6 (x64):
      image: 'windows-latest'
      python.version: '3.6'
      python.architecture: 'x64'
    Windows CPython3.7 (x86):
      image: 'windows-latest'
      python.version: '3.7'
      python.architecture: 'x86'
    Windows CPython3.7 (x64):
      image: 'windows-latest'
      python.version: '3.7'
      python.architecture: 'x64'
    Windows CPython3.8 (x86):
      image: 'windows-latest'
      python.version: '3.8'
      python.architecture: 'x86'
    Windows CPython3.8 (x64):
      image: 'windows-latest'
      python.version: '3.8'
      python.architecture: 'x64'
    Windows CPython3.9 (x86):
      image: 'windows-latest'
      python.version: '3.9'
      python.architecture: 'x86'
    Windows CPython3.9 (x64):
      image: 'windows-latest'
      python.version: '3.9'
      python.architecture: 'x64'
    Windows CPython3.10 (x86):
      image: 'windows-latest'
      python.version: '3.9'
      python.architecture: 'x86'
    Windows CPython3.10 (x64):
      image: 'windows-latest'
      python.version: '3.9'
      python.architecture: 'x64'
    Windows PyPy3:
      image: 'windows-latest'
      python.version: 'pypy3'
      python.architecture: 'x86'

pool:
  vmImage: $(image)

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(python.architecture)'
  - bash: python -m pip install --upgrade pip setuptools
    displayName: 'Install packaging tools'
  - bash: python setup.py develop
    displayName: 'Install in editable mode'
    env:
      CPPFLAGS: --coverage -O0
  - bash: python -m pip install --upgrade coverage codecov
    displayName: 'Install coverage dependencies'
  - bash: coverage run -m doctest README.md
    displayName: 'Run doctests'
  - bash: python -m pip install -r requirements-tests.txt
    displayName: 'Install tests dependencies'
  - bash: coverage run --append -m pytest
    displayName: 'Run tests'
  - bash: coverage xml
    displayName: 'Collect coverage'
  - bash: python -m codecov -f coverage.xml -X gcov --build "$AGENT_JOBNAME"
    condition: succeeded()
    displayName: 'Upload coverage'
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
  - ${{ if startsWith(variables['python.version'], '3.') }}:
    - bash: python -m pip install --upgrade gcovr
      condition: succeeded()
      displayName: 'Install ะก++ coverage dependencies'
    - bash: gcovr --filter src/ --filter include/ --xml -o coverage_cpp.xml
      condition: succeeded()
      displayName: 'Collect C++ coverage'
    - bash: python -m codecov -f coverage_cpp.xml -X gcov --build "$AGENT_JOBNAME"
      condition: succeeded()
      displayName: 'Upload C++ coverage'
      env:
        CODECOV_TOKEN: $(CODECOV_TOKEN)
  - ${{ if and(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), startsWith(variables['python.version'], '3.')) }}:
    - bash: python -m pip install --upgrade cibuildwheel
      condition: succeeded()
      displayName: 'Install build dependencies'
    - bash: rm -rf build && rm -f $(python -c 'from importlib.machinery import EXTENSION_SUFFIXES; print(" ".join("*" + suffix for suffix in EXTENSION_SUFFIXES))')
      condition: succeeded()
      displayName: 'Pre-build'
    - bash: python setup.py sdist
      condition: succeeded()
      displayName: 'Build source distribution'
    - bash:
        CIBW_BUILD=$(python -c 'import sys; print("cp" + "".join(map(str, sys.version_info[:2])) + "-*")')
        cibuildwheel --output-dir dist
      condition: succeeded()
      displayName: 'Build wheels'
    - bash: python -m pip install --upgrade twine
      condition: succeeded()
      displayName: 'Install deploy dependencies'
    - bash: twine upload --skip-existing dist/*
      condition: succeeded()
      displayName: 'Deploy'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: $(TWINE_PASSWORD)
